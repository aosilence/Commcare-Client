package commcare.capstone.comcare.webservice;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.6
//
// Date Of Creation: 10/15/2017 3:39:54 PM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//
import org.ksoap2.serialization.KvmSerializable;
import org.ksoap2.serialization.PropertyInfo;
import java.util.Hashtable;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import static android.webkit.ConsoleMessage.MessageLevel.LOG;

public class DataResponse implements KvmSerializable {

    Logger LOG = LoggerFactory.getLogger(DataResponse.class);

    public VectorHouseVisit visits = new VectorHouseVisit();
    public String interfaceVersion;
    public String responseDate;
    public boolean responseDateSpecified;
    
    public DataResponse(){}
    
    public DataResponse(SoapObject soapObject)
    {
        if (soapObject == null)
            return;
        if (soapObject.hasProperty("visits"))
        {
            int size = soapObject.getPropertyCount();
            for (int i0=0;i0<size;i0++){
                Object obj = soapObject.getProperty(i0);
                if (obj!=null && obj.getClass().equals(SoapObject.class)){
                    SoapObject j0 =(SoapObject) soapObject.getProperty(i0);
                    LOG.debug("housevisit : "+j0.toString());
                    HouseVisit j1= new HouseVisit(j0);
                    visits.add(j1);
                }
            }
        }
        if (soapObject.hasProperty("interfaceVersion"))
        {
            Object obj = soapObject.getProperty("interfaceVersion");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                interfaceVersion = j.toString();
            }else if (obj!= null && obj instanceof String){
                interfaceVersion = (String) obj;
            }
        }
        if (soapObject.hasProperty("responseDate"))
        {
            Object obj = soapObject.getProperty("responseDate");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                responseDate = j.toString();
            }else if (obj!= null && obj instanceof String){
                responseDate = (String) obj;
            }
        }
        if (soapObject.hasProperty("responseDateSpecified"))
        {
            Object obj = soapObject.getProperty("responseDateSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                responseDateSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                responseDateSpecified = (Boolean) obj;
            }
        }
    }
    @Override
    public Object getProperty(int arg0) {
        switch(arg0){
            case 0:
                return visits;
            case 1:
                return interfaceVersion;
            case 2:
                return responseDate;
            case 3:
                return responseDateSpecified;
        }
        return null;
    }
    
    @Override
    public int getPropertyCount() {
        return 4;
    }
    
    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
        switch(index){
            case 0:
                info.type = PropertyInfo.VECTOR_CLASS;
                info.name = "visits";
                break;
            case 1:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "interfaceVersion";
                break;
            case 2:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "responseDate";
                break;
            case 3:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "responseDateSpecified";
                break;
        }
    }
    
    @Override
    public String getInnerText() {
        return null;
    }
    
    
    @Override
    public void setInnerText(String s) {
    }
    
    
    @Override
    public void setProperty(int arg0, Object arg1) {
    }
    
}
