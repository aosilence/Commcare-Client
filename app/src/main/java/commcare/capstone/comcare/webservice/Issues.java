package commcare.capstone.comcare.webservice;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.6
//
// Date Of Creation: 10/15/2017 3:39:54 PM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//
import org.ksoap2.serialization.KvmSerializable;
import org.ksoap2.serialization.PropertyInfo;
import java.util.Hashtable;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

public class Issues implements KvmSerializable {
    
    public boolean adult;
    public boolean adultSpecified;
    public String adultMore;
    public boolean agency;
    public boolean agencySpecified;
    public String agencyMore;
    public boolean caregiving;
    public boolean caregivingSpecified;
    public boolean childcare;
    public boolean childcareSpecified;
    public boolean conflict;
    public boolean conflictSpecified;
    public boolean elderly;
    public boolean elderlySpecified;
    public boolean employment;
    public boolean employmentSpecified;
    public boolean familyIllness;
    public boolean familyIllnessSpecified;
    public String familyIllnessMore;
    public boolean financial;
    public boolean financialSpecified;
    public boolean gambling;
    public boolean gamblingSpecified;
    public boolean health;
    public boolean healthSpecified;
    public boolean hearing;
    public boolean hearingSpecified;
    public String hearingMore;
    public boolean housing;
    public boolean housingSpecified;
    public long id;
    public boolean idSpecified;
    public boolean interpersonal;
    public boolean interpersonalSpecified;
    public boolean juvenile;
    public boolean juvenileSpecified;
    public boolean largeWithChild;
    public boolean largeWithChildSpecified;
    public String largeWithChildMore;
    public boolean largeWithElder;
    public boolean largeWithElderSpecified;
    public String largeWithElderMore;
    public boolean medical;
    public boolean medicalSpecified;
    public String medicalMore;
    public boolean mental;
    public boolean mentalSpecified;
    public String otherInformation;
    public boolean others;
    public boolean othersSpecified;
    public boolean others2;
    public boolean others2Specified;
    public String others2More;
    public DataCollectionForm parent;
    public boolean parenting;
    public boolean parentingSpecified;
    public boolean partner;
    public boolean partnerSpecified;
    public boolean retrenchment;
    public boolean retrenchmentSpecified;
    public boolean school;
    public boolean schoolSpecified;
    public boolean schoolFund;
    public boolean schoolFundSpecified;
    public String schoolFundMore;
    public boolean senior;
    public boolean seniorSpecified;
    public String seniorMore;
    public boolean sso;
    public boolean ssoSpecified;
    public String ssoMore;
    public boolean substance;
    public boolean substanceSpecified;
    public boolean three;
    public boolean threeSpecified;
    public String threeMore;
    public boolean unemployement;
    public boolean unemployementSpecified;
    public String unemployementMore;
    public boolean unfit;
    public boolean unfitSpecified;
    public String unfitMore;
    public boolean violence;
    public boolean violenceSpecified;
    public boolean visual;
    public boolean visualSpecified;
    public String visualMore;
    public boolean youth;
    public boolean youthSpecified;
    
    public Issues(){}
    
    public Issues(SoapObject soapObject)
    {
        if (soapObject == null)
            return;
        if (soapObject.hasProperty("adult"))
        {
            Object obj = soapObject.getProperty("adult");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                adult = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                adult = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("adultSpecified"))
        {
            Object obj = soapObject.getProperty("adultSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                adultSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                adultSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("adultMore"))
        {
            Object obj = soapObject.getProperty("adultMore");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                adultMore = j.toString();
            }else if (obj!= null && obj instanceof String){
                adultMore = (String) obj;
            }
        }
        if (soapObject.hasProperty("agency"))
        {
            Object obj = soapObject.getProperty("agency");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                agency = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                agency = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("agencySpecified"))
        {
            Object obj = soapObject.getProperty("agencySpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                agencySpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                agencySpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("agencyMore"))
        {
            Object obj = soapObject.getProperty("agencyMore");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                agencyMore = j.toString();
            }else if (obj!= null && obj instanceof String){
                agencyMore = (String) obj;
            }
        }
        if (soapObject.hasProperty("caregiving"))
        {
            Object obj = soapObject.getProperty("caregiving");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                caregiving = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                caregiving = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("caregivingSpecified"))
        {
            Object obj = soapObject.getProperty("caregivingSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                caregivingSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                caregivingSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("childcare"))
        {
            Object obj = soapObject.getProperty("childcare");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                childcare = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                childcare = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("childcareSpecified"))
        {
            Object obj = soapObject.getProperty("childcareSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                childcareSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                childcareSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("conflict"))
        {
            Object obj = soapObject.getProperty("conflict");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                conflict = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                conflict = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("conflictSpecified"))
        {
            Object obj = soapObject.getProperty("conflictSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                conflictSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                conflictSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("elderly"))
        {
            Object obj = soapObject.getProperty("elderly");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                elderly = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                elderly = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("elderlySpecified"))
        {
            Object obj = soapObject.getProperty("elderlySpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                elderlySpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                elderlySpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("employment"))
        {
            Object obj = soapObject.getProperty("employment");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                employment = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                employment = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("employmentSpecified"))
        {
            Object obj = soapObject.getProperty("employmentSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                employmentSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                employmentSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("familyIllness"))
        {
            Object obj = soapObject.getProperty("familyIllness");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                familyIllness = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                familyIllness = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("familyIllnessSpecified"))
        {
            Object obj = soapObject.getProperty("familyIllnessSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                familyIllnessSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                familyIllnessSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("familyIllnessMore"))
        {
            Object obj = soapObject.getProperty("familyIllnessMore");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                familyIllnessMore = j.toString();
            }else if (obj!= null && obj instanceof String){
                familyIllnessMore = (String) obj;
            }
        }
        if (soapObject.hasProperty("financial"))
        {
            Object obj = soapObject.getProperty("financial");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                financial = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                financial = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("financialSpecified"))
        {
            Object obj = soapObject.getProperty("financialSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                financialSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                financialSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("gambling"))
        {
            Object obj = soapObject.getProperty("gambling");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                gambling = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                gambling = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("gamblingSpecified"))
        {
            Object obj = soapObject.getProperty("gamblingSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                gamblingSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                gamblingSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("health"))
        {
            Object obj = soapObject.getProperty("health");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                health = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                health = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("healthSpecified"))
        {
            Object obj = soapObject.getProperty("healthSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                healthSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                healthSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("hearing"))
        {
            Object obj = soapObject.getProperty("hearing");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                hearing = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                hearing = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("hearingSpecified"))
        {
            Object obj = soapObject.getProperty("hearingSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                hearingSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                hearingSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("hearingMore"))
        {
            Object obj = soapObject.getProperty("hearingMore");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                hearingMore = j.toString();
            }else if (obj!= null && obj instanceof String){
                hearingMore = (String) obj;
            }
        }
        if (soapObject.hasProperty("housing"))
        {
            Object obj = soapObject.getProperty("housing");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                housing = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                housing = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("housingSpecified"))
        {
            Object obj = soapObject.getProperty("housingSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                housingSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                housingSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("id"))
        {
            Object obj = soapObject.getProperty("id");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                id = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                id = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("idSpecified"))
        {
            Object obj = soapObject.getProperty("idSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                idSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                idSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("interpersonal"))
        {
            Object obj = soapObject.getProperty("interpersonal");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                interpersonal = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                interpersonal = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("interpersonalSpecified"))
        {
            Object obj = soapObject.getProperty("interpersonalSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                interpersonalSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                interpersonalSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("juvenile"))
        {
            Object obj = soapObject.getProperty("juvenile");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                juvenile = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                juvenile = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("juvenileSpecified"))
        {
            Object obj = soapObject.getProperty("juvenileSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                juvenileSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                juvenileSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("largeWithChild"))
        {
            Object obj = soapObject.getProperty("largeWithChild");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                largeWithChild = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                largeWithChild = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("largeWithChildSpecified"))
        {
            Object obj = soapObject.getProperty("largeWithChildSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                largeWithChildSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                largeWithChildSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("largeWithChildMore"))
        {
            Object obj = soapObject.getProperty("largeWithChildMore");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                largeWithChildMore = j.toString();
            }else if (obj!= null && obj instanceof String){
                largeWithChildMore = (String) obj;
            }
        }
        if (soapObject.hasProperty("largeWithElder"))
        {
            Object obj = soapObject.getProperty("largeWithElder");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                largeWithElder = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                largeWithElder = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("largeWithElderSpecified"))
        {
            Object obj = soapObject.getProperty("largeWithElderSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                largeWithElderSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                largeWithElderSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("largeWithElderMore"))
        {
            Object obj = soapObject.getProperty("largeWithElderMore");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                largeWithElderMore = j.toString();
            }else if (obj!= null && obj instanceof String){
                largeWithElderMore = (String) obj;
            }
        }
        if (soapObject.hasProperty("medical"))
        {
            Object obj = soapObject.getProperty("medical");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                medical = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                medical = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("medicalSpecified"))
        {
            Object obj = soapObject.getProperty("medicalSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                medicalSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                medicalSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("medicalMore"))
        {
            Object obj = soapObject.getProperty("medicalMore");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                medicalMore = j.toString();
            }else if (obj!= null && obj instanceof String){
                medicalMore = (String) obj;
            }
        }
        if (soapObject.hasProperty("mental"))
        {
            Object obj = soapObject.getProperty("mental");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                mental = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                mental = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("mentalSpecified"))
        {
            Object obj = soapObject.getProperty("mentalSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                mentalSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                mentalSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("otherInformation"))
        {
            Object obj = soapObject.getProperty("otherInformation");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                otherInformation = j.toString();
            }else if (obj!= null && obj instanceof String){
                otherInformation = (String) obj;
            }
        }
        if (soapObject.hasProperty("others"))
        {
            Object obj = soapObject.getProperty("others");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                others = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                others = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("othersSpecified"))
        {
            Object obj = soapObject.getProperty("othersSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                othersSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                othersSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("others2"))
        {
            Object obj = soapObject.getProperty("others2");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                others2 = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                others2 = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("others2Specified"))
        {
            Object obj = soapObject.getProperty("others2Specified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                others2Specified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                others2Specified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("others2More"))
        {
            Object obj = soapObject.getProperty("others2More");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                others2More = j.toString();
            }else if (obj!= null && obj instanceof String){
                others2More = (String) obj;
            }
        }
        if (soapObject.hasProperty("parent"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("parent");
            parent =  new DataCollectionForm (j);
            
        }
        if (soapObject.hasProperty("parenting"))
        {
            Object obj = soapObject.getProperty("parenting");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                parenting = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                parenting = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("parentingSpecified"))
        {
            Object obj = soapObject.getProperty("parentingSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                parentingSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                parentingSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("partner"))
        {
            Object obj = soapObject.getProperty("partner");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                partner = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                partner = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("partnerSpecified"))
        {
            Object obj = soapObject.getProperty("partnerSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                partnerSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                partnerSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("retrenchment"))
        {
            Object obj = soapObject.getProperty("retrenchment");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                retrenchment = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                retrenchment = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("retrenchmentSpecified"))
        {
            Object obj = soapObject.getProperty("retrenchmentSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                retrenchmentSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                retrenchmentSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("school"))
        {
            Object obj = soapObject.getProperty("school");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                school = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                school = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("schoolSpecified"))
        {
            Object obj = soapObject.getProperty("schoolSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                schoolSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                schoolSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("schoolFund"))
        {
            Object obj = soapObject.getProperty("schoolFund");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                schoolFund = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                schoolFund = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("schoolFundSpecified"))
        {
            Object obj = soapObject.getProperty("schoolFundSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                schoolFundSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                schoolFundSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("schoolFundMore"))
        {
            Object obj = soapObject.getProperty("schoolFundMore");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                schoolFundMore = j.toString();
            }else if (obj!= null && obj instanceof String){
                schoolFundMore = (String) obj;
            }
        }
        if (soapObject.hasProperty("senior"))
        {
            Object obj = soapObject.getProperty("senior");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                senior = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                senior = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("seniorSpecified"))
        {
            Object obj = soapObject.getProperty("seniorSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                seniorSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                seniorSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("seniorMore"))
        {
            Object obj = soapObject.getProperty("seniorMore");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                seniorMore = j.toString();
            }else if (obj!= null && obj instanceof String){
                seniorMore = (String) obj;
            }
        }
        if (soapObject.hasProperty("sso"))
        {
            Object obj = soapObject.getProperty("sso");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                sso = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                sso = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("ssoSpecified"))
        {
            Object obj = soapObject.getProperty("ssoSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                ssoSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                ssoSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("ssoMore"))
        {
            Object obj = soapObject.getProperty("ssoMore");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                ssoMore = j.toString();
            }else if (obj!= null && obj instanceof String){
                ssoMore = (String) obj;
            }
        }
        if (soapObject.hasProperty("substance"))
        {
            Object obj = soapObject.getProperty("substance");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                substance = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                substance = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("substanceSpecified"))
        {
            Object obj = soapObject.getProperty("substanceSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                substanceSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                substanceSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("three"))
        {
            Object obj = soapObject.getProperty("three");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                three = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                three = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("threeSpecified"))
        {
            Object obj = soapObject.getProperty("threeSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                threeSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                threeSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("threeMore"))
        {
            Object obj = soapObject.getProperty("threeMore");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                threeMore = j.toString();
            }else if (obj!= null && obj instanceof String){
                threeMore = (String) obj;
            }
        }
        if (soapObject.hasProperty("unemployement"))
        {
            Object obj = soapObject.getProperty("unemployement");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                unemployement = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                unemployement = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("unemployementSpecified"))
        {
            Object obj = soapObject.getProperty("unemployementSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                unemployementSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                unemployementSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("unemployementMore"))
        {
            Object obj = soapObject.getProperty("unemployementMore");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                unemployementMore = j.toString();
            }else if (obj!= null && obj instanceof String){
                unemployementMore = (String) obj;
            }
        }
        if (soapObject.hasProperty("unfit"))
        {
            Object obj = soapObject.getProperty("unfit");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                unfit = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                unfit = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("unfitSpecified"))
        {
            Object obj = soapObject.getProperty("unfitSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                unfitSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                unfitSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("unfitMore"))
        {
            Object obj = soapObject.getProperty("unfitMore");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                unfitMore = j.toString();
            }else if (obj!= null && obj instanceof String){
                unfitMore = (String) obj;
            }
        }
        if (soapObject.hasProperty("violence"))
        {
            Object obj = soapObject.getProperty("violence");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                violence = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                violence = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("violenceSpecified"))
        {
            Object obj = soapObject.getProperty("violenceSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                violenceSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                violenceSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("visual"))
        {
            Object obj = soapObject.getProperty("visual");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                visual = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                visual = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("visualSpecified"))
        {
            Object obj = soapObject.getProperty("visualSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                visualSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                visualSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("visualMore"))
        {
            Object obj = soapObject.getProperty("visualMore");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                visualMore = j.toString();
            }else if (obj!= null && obj instanceof String){
                visualMore = (String) obj;
            }
        }
        if (soapObject.hasProperty("youth"))
        {
            Object obj = soapObject.getProperty("youth");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                youth = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                youth = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("youthSpecified"))
        {
            Object obj = soapObject.getProperty("youthSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                youthSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                youthSpecified = (Boolean) obj;
            }
        }
    }
    @Override
    public Object getProperty(int arg0) {
        switch(arg0){
            case 0:
                return adult;
            case 1:
                return adultSpecified;
            case 2:
                return adultMore;
            case 3:
                return agency;
            case 4:
                return agencySpecified;
            case 5:
                return agencyMore;
            case 6:
                return caregiving;
            case 7:
                return caregivingSpecified;
            case 8:
                return childcare;
            case 9:
                return childcareSpecified;
            case 10:
                return conflict;
            case 11:
                return conflictSpecified;
            case 12:
                return elderly;
            case 13:
                return elderlySpecified;
            case 14:
                return employment;
            case 15:
                return employmentSpecified;
            case 16:
                return familyIllness;
            case 17:
                return familyIllnessSpecified;
            case 18:
                return familyIllnessMore;
            case 19:
                return financial;
            case 20:
                return financialSpecified;
            case 21:
                return gambling;
            case 22:
                return gamblingSpecified;
            case 23:
                return health;
            case 24:
                return healthSpecified;
            case 25:
                return hearing;
            case 26:
                return hearingSpecified;
            case 27:
                return hearingMore;
            case 28:
                return housing;
            case 29:
                return housingSpecified;
            case 30:
                return id;
            case 31:
                return idSpecified;
            case 32:
                return interpersonal;
            case 33:
                return interpersonalSpecified;
            case 34:
                return juvenile;
            case 35:
                return juvenileSpecified;
            case 36:
                return largeWithChild;
            case 37:
                return largeWithChildSpecified;
            case 38:
                return largeWithChildMore;
            case 39:
                return largeWithElder;
            case 40:
                return largeWithElderSpecified;
            case 41:
                return largeWithElderMore;
            case 42:
                return medical;
            case 43:
                return medicalSpecified;
            case 44:
                return medicalMore;
            case 45:
                return mental;
            case 46:
                return mentalSpecified;
            case 47:
                return otherInformation;
            case 48:
                return others;
            case 49:
                return othersSpecified;
            case 50:
                return others2;
            case 51:
                return others2Specified;
            case 52:
                return others2More;
            case 53:
                return parent;
            case 54:
                return parenting;
            case 55:
                return parentingSpecified;
            case 56:
                return partner;
            case 57:
                return partnerSpecified;
            case 58:
                return retrenchment;
            case 59:
                return retrenchmentSpecified;
            case 60:
                return school;
            case 61:
                return schoolSpecified;
            case 62:
                return schoolFund;
            case 63:
                return schoolFundSpecified;
            case 64:
                return schoolFundMore;
            case 65:
                return senior;
            case 66:
                return seniorSpecified;
            case 67:
                return seniorMore;
            case 68:
                return sso;
            case 69:
                return ssoSpecified;
            case 70:
                return ssoMore;
            case 71:
                return substance;
            case 72:
                return substanceSpecified;
            case 73:
                return three;
            case 74:
                return threeSpecified;
            case 75:
                return threeMore;
            case 76:
                return unemployement;
            case 77:
                return unemployementSpecified;
            case 78:
                return unemployementMore;
            case 79:
                return unfit;
            case 80:
                return unfitSpecified;
            case 81:
                return unfitMore;
            case 82:
                return violence;
            case 83:
                return violenceSpecified;
            case 84:
                return visual;
            case 85:
                return visualSpecified;
            case 86:
                return visualMore;
            case 87:
                return youth;
            case 88:
                return youthSpecified;
        }
        return null;
    }
    
    @Override
    public int getPropertyCount() {
        return 89;
    }
    
    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
        switch(index){
            case 0:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "adult";
                break;
            case 1:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "adultSpecified";
                break;
            case 2:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "adultMore";
                break;
            case 3:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "agency";
                break;
            case 4:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "agencySpecified";
                break;
            case 5:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "agencyMore";
                break;
            case 6:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "caregiving";
                break;
            case 7:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "caregivingSpecified";
                break;
            case 8:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "childcare";
                break;
            case 9:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "childcareSpecified";
                break;
            case 10:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "conflict";
                break;
            case 11:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "conflictSpecified";
                break;
            case 12:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "elderly";
                break;
            case 13:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "elderlySpecified";
                break;
            case 14:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "employment";
                break;
            case 15:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "employmentSpecified";
                break;
            case 16:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "familyIllness";
                break;
            case 17:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "familyIllnessSpecified";
                break;
            case 18:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "familyIllnessMore";
                break;
            case 19:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "financial";
                break;
            case 20:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "financialSpecified";
                break;
            case 21:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "gambling";
                break;
            case 22:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "gamblingSpecified";
                break;
            case 23:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "health";
                break;
            case 24:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "healthSpecified";
                break;
            case 25:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "hearing";
                break;
            case 26:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "hearingSpecified";
                break;
            case 27:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "hearingMore";
                break;
            case 28:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "housing";
                break;
            case 29:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "housingSpecified";
                break;
            case 30:
                info.type = Long.class;
                info.name = "id";
                break;
            case 31:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "idSpecified";
                break;
            case 32:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "interpersonal";
                break;
            case 33:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "interpersonalSpecified";
                break;
            case 34:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "juvenile";
                break;
            case 35:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "juvenileSpecified";
                break;
            case 36:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "largeWithChild";
                break;
            case 37:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "largeWithChildSpecified";
                break;
            case 38:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "largeWithChildMore";
                break;
            case 39:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "largeWithElder";
                break;
            case 40:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "largeWithElderSpecified";
                break;
            case 41:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "largeWithElderMore";
                break;
            case 42:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "medical";
                break;
            case 43:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "medicalSpecified";
                break;
            case 44:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "medicalMore";
                break;
            case 45:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "mental";
                break;
            case 46:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "mentalSpecified";
                break;
            case 47:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "otherInformation";
                break;
            case 48:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "others";
                break;
            case 49:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "othersSpecified";
                break;
            case 50:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "others2";
                break;
            case 51:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "others2Specified";
                break;
            case 52:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "others2More";
                break;
            case 53:
                info.type = DataCollectionForm.class;
                info.name = "parent";
                break;
            case 54:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "parenting";
                break;
            case 55:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "parentingSpecified";
                break;
            case 56:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "partner";
                break;
            case 57:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "partnerSpecified";
                break;
            case 58:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "retrenchment";
                break;
            case 59:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "retrenchmentSpecified";
                break;
            case 60:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "school";
                break;
            case 61:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "schoolSpecified";
                break;
            case 62:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "schoolFund";
                break;
            case 63:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "schoolFundSpecified";
                break;
            case 64:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "schoolFundMore";
                break;
            case 65:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "senior";
                break;
            case 66:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "seniorSpecified";
                break;
            case 67:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "seniorMore";
                break;
            case 68:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "sso";
                break;
            case 69:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "ssoSpecified";
                break;
            case 70:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "ssoMore";
                break;
            case 71:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "substance";
                break;
            case 72:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "substanceSpecified";
                break;
            case 73:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "three";
                break;
            case 74:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "threeSpecified";
                break;
            case 75:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "threeMore";
                break;
            case 76:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "unemployement";
                break;
            case 77:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "unemployementSpecified";
                break;
            case 78:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "unemployementMore";
                break;
            case 79:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "unfit";
                break;
            case 80:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "unfitSpecified";
                break;
            case 81:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "unfitMore";
                break;
            case 82:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "violence";
                break;
            case 83:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "violenceSpecified";
                break;
            case 84:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "visual";
                break;
            case 85:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "visualSpecified";
                break;
            case 86:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "visualMore";
                break;
            case 87:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "youth";
                break;
            case 88:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "youthSpecified";
                break;
        }
    }
    
    @Override
    public String getInnerText() {
        return null;
    }
    
    
    @Override
    public void setInnerText(String s) {
    }
    
    
    @Override
    public void setProperty(int arg0, Object arg1) {
    }
    
}
